<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lee Green]]></title>
  <link href="http://lee.greens.io/atom.xml" rel="self"/>
  <link href="http://lee.greens.io/"/>
  <updated>2016-02-13T19:57:50-06:00</updated>
  <id>http://lee.greens.io/</id>
  <author>
    <name><![CDATA[Lee Green]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developer Superpower: Aliases]]></title>
    <link href="http://lee.greens.io/blog/2016/02/08/developer-superpower-aliases/"/>
    <updated>2016-02-08T23:08:00-06:00</updated>
    <id>http://lee.greens.io/blog/2016/02/08/developer-superpower-aliases</id>
    <content type="html"><![CDATA[<p><small>
This is the second in a
<a href="http://lee.greens.io/blog/categories/developer-superpowers/">series of posts</a>
designed to help you supercharge your workflow.
</small></p>

<p>In my <a href="http://lee.greens.io/blog/2015/06/08/developer-superpower-z/">last post</a> I mentioned
aliases in passing. A few readers asked me for more information, so I thought
I&rsquo;d write another post.</p>

<p>An alias is essentially a shortcut, or abbreviation, which lets you &ldquo;remap&rdquo; any
command to run one or more other commands. Many developer / command-line tools
support aliases, from command-line shells like bash, zsh, or PowerShell, to
version-control systems like Git or Mercurial. I&rsquo;ll give concrete examples for
bash and Git in this post.</p>

<p>Before I do, though, I want to talk about the reasons one might create an alias.
I find that the aliases I need can be classified into a few categories:</p>

<h3>Convenience</h3>

<p>These aliases are all about speed, so they&rsquo;re as short as possible.
<code>git diff</code> takes too long to type? Alias it to <code>gd</code>.
The most common example of this is the <code>ll</code> alias for <code>ls -l</code>, now included
in many Linux distros by default.</p>

<p>I also include in this category aliases that cover common typos, for example:</p>

<ul>
<li><code>cd..</code> instead of <code>cd ..</code> (leaving out the space)</li>
<li><code>rpsec</code> instead of <code>rspec</code> (transposing the s and the p)</li>
<li><code>xs</code> or <code>vf</code> instead of <code>cd</code> (off-by-one error)</li>
<li><code>gut</code> or <code>got</code> instead of <code>git</code> (off-by-one error on the other hand)</li>
</ul>


<h3>Backwards compatibility</h3>

<p>I started working as a software developer before Linus created Git, in what
many consider &ldquo;the dark ages&rdquo;. As such, I spent a few years using RCS and CVS
for version control. In RCS the commands for <code>check out</code> and <code>check in</code> are
<code>co</code> and <code>ci</code>; these commands were preserved in CVS as aliases for
<code>checkout</code> and <code>commit</code> respectively.</p>

<p>As Git became popular and our projects switched over to using it exclusively,
a senior developer I worked with set up extensive aliases so he could continue
using the same commands he&rsquo;d been used to. I try not to go that far, but muscle
memory is powerful &mdash; and aliases like this can save you a lot of pain.</p>

<h3>Frame of mind</h3>

<p>This one actually started as a backwards compatibility alias, but its role has
really evolved for me over time. Most version-control systems have a command
that shows you which user last modified each line in a file. In SVN, this
commmand is called <code>blame</code>, but it has aliases: <code>annotate</code> and <code>praise</code>.</p>

<p>When we switched to Git, that same senior dev installed <code>praise</code> as an alias for
<code>blame</code>. Even though I&rsquo;ve never used SVN heavily, I still invoke <code>praise</code> every
time, because it reminds me to be charitable with my fellow developers.</p>

<h2>Bash</h2>

<p>In Bash, aliases are created using <code>alias</code>, and destroyed with <code>unalias</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s1">&#39;ls -l&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">rpsec</span><span class="o">=</span><span class="s1">&#39;rspec&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">unalias </span>ll
</span><span class='line'><span class="nb">unalias </span>rpsec
</span></code></pre></td></tr></table></div></figure>


<p>Personal aliases are typically defined in the <code>~/.bashrc</code> file.</p>

<p>Note that aliases can cover or &ldquo;shadow&rdquo; existing commands. This can be both
frustrating and awesome. For example, if you alias <code>ls</code> to <code>ls -G</code>, all your
invocations of <code>ls</code> will hit the alias, not the base command.</p>

<p><a href="http://tldp.org/LDP/abs/html/aliases.html">tldp.org</a> has more information on aliases in Bash.</p>

<h2>Git</h2>

<p>There are two ways to create Git aliases. The first is via command line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global alias.co checkout
</span><span class='line'>git config --global alias.ci commit
</span></code></pre></td></tr></table></div></figure>


<p>The second way is via editing a <code>~/.gitconfig</code> (global) or
<code>.git/config</code> (per-repository) file (this is my actual gitconfig file):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[alias]</span>
</span><span class='line'>    <span class="na">ci</span> <span class="o">=</span> <span class="s">commit</span>
</span><span class='line'><span class="s">    co = checkout</span>
</span><span class='line'><span class="s">    st = status</span>
</span><span class='line'><span class="s">    stat = status</span>
</span><span class='line'><span class="s">    praise = blame</span>
</span><span class='line'><span class="s">    sb = show-branch</span>
</span><span class='line'><span class="s">    what = whatchanged</span>
</span><span class='line'><span class="s">    br = branch -a --color</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># &quot;merged branches&quot; -- which branches are ancestors of the specified ref?</span>
</span><span class='line'>    <span class="na">mbr</span> <span class="o">=</span> <span class="s">branch -a --merged</span>
</span><span class='line'><span class="s">    # &quot;what branches&quot; -- which branches contain the specified ref?</span>
</span><span class='line'><span class="s">    wbr = branch -a --contains</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># typo</span>
</span><span class='line'>    <span class="na">difff</span> <span class="o">=</span> <span class="s">diff</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># list all aliases</span>
</span><span class='line'>    <span class="na">la</span> <span class="o">=</span> <span class="s">&quot;!git config -l | grep alias | cut -c 7-&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can shell out in a Git alias, by starting the alias with a <code>!</code> character:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global alias.visual <span class="s1">&#39;!gitk&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s worth noting that the awesome <a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash">git-completion</a> supports
tab completion for aliases, as well as Git builtin commands. You should probably
install it, if you haven&rsquo;t already :)</p>

<p>For more information on Git aliases, see the Pro Git book (pay for it!), or
check <a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases">here.</a></p>

<p>Here are a few samples of real-world Git aliases. Check these out, steal them
for your own use, and remix them to increase your productivity!</p>

<ul>
<li><a href="https://gist.github.com/mwhite/6887990">The Ultimate Git Alias Setup</a></li>
<li><a href="http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/">Must-Have Git Aliases</a></li>
<li><a href="https://ochronus.com/git-tips-from-the-trenches/">Git Tips from the Trenches</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Superpower: Z]]></title>
    <link href="http://lee.greens.io/blog/2015/06/08/developer-superpower-z/"/>
    <updated>2015-06-08T18:04:00-05:00</updated>
    <id>http://lee.greens.io/blog/2015/06/08/developer-superpower-z</id>
    <content type="html"><![CDATA[<p><small>
This is the first in a <a href="http://lee.greens.io/blog/categories/developer-superpowers/">series of posts</a>
designed to help you supercharge your workflow.
</small></p>

<p>Anyone who uses a command-line interface needs to change directories on a
regular basis. Even if your terminal emulator allows you to open new windows
in the same directory as previous ones, you still need to move around to get
work done.</p>

<h3>The problem</h3>

<p><img class="right" src="http://lee.greens.io/images/soap_fail.gif"></p>

<p>Getting directory paths right can take a lot of time, especially within a new
project or a new environment. Shell tab completion can help, but it still has
to be navigated, and new entries mess with your muscle memory.</p>

<p>There are, of course, more creative solutions: I&rsquo;ve seen developers who create
aliases for each major project directory they work with, which is nice at first,
but it doesn&rsquo;t really scale.</p>

<h3>The solution</h3>

<p>As is typical in computing, we can stand on the shoulders of giants &mdash; Behold
<a href="https://github.com/rupa/z">Z</a>, a directory jumper which enables freaky-fast
directory switching:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ z blog; pwd
</span><span class='line'>/Users/this_is_me/devel/blog
</span><span class='line'>
</span><span class='line'>$ z bigco roi; pwd
</span><span class='line'>/Users/this_is_me/devel/consulting/bigco/2014/roi_reporting_project
</span><span class='line'>
</span><span class='line'>$ z scipy 0.15; pwd
</span><span class='line'>/Users/this_is_me/devel/oss/scipy/0.15</span></code></pre></td></tr></table></div></figure>


<p>It chooses directories based on <em>frecency</em>, which is &ldquo;a portmanteau of
frequency and recency&rdquo;.  It has a few options, so check
<a href="https://github.com/rupa/z">GitHub</a>, but I usually just invoke it bare &mdash;
in my experience, it pretty much always Does What I Mean.</p>

<h3>Installation</h3>

<p>If you&rsquo;re on OS X, it&rsquo;s available via <a href="http://brew.sh/">Homebrew</a>, or follow
the instructions below.</p>

<p>Just save it to disk and source it in your shell files &mdash; e.g. for bash:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -o ~/.z.sh -sSL https://raw.githubusercontent.com/rupa/z/d5adc9a6239c2ee44309fd78bca68f301eb0d45a/z.sh
</span><span class='line'><span class="c"># examine the downloaded file, if all appears good:</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;. ~/.z.sh&#39;</span> &gt;&gt; ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<p>Afterwards, you may have to open a new terminal, or restart.</p>

<p><em>Note:</em> The above snippet uses HTTPS and a fixed Git SHA, but do be careful here,
since we&rsquo;re basically <a href="http://www.seancassidy.me/dont-pipe-to-your-shell.html">piping curl to shell</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix tar errors on OS X]]></title>
    <link href="http://lee.greens.io/blog/2014/05/06/fix-tar-errors-on-os-x/"/>
    <updated>2014-05-06T16:06:00-05:00</updated>
    <id>http://lee.greens.io/blog/2014/05/06/fix-tar-errors-on-os-x</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve worked on a lot of software projects over the past 10 years, and on many of
them, developers worked on OS X (or a Linux VM, using
<a href="http://www.vagrantup.com">Vagrant</a>), while the code was deployed on Linux.
This can cause issues when extracting tar.gz files on Linux that were created on OS X.</p>

<p>If you&rsquo;ve ever seen an error like this, you know what I&rsquo;m talking about:</p>

<pre><code>tar: Ignoring unknown extended header keyword `SCHILY.dev'
tar: Ignoring unknown extended header keyword `SCHILY.ino'
tar: Ignoring unknown extended header keyword `SCHILY.nlink'
tar: Error exit delayed from previous errors
</code></pre>

<h2>What&rsquo;s going on?</h2>

<p>There are a few issues at play here:</p>

<ul>
<li>On OS X, the default tar version is BSD, whereas on Linux it is GNU.</li>
<li>OS X encodes file attributes as extended headers in tar. BSD tar supports this,
GNU tar does not.</li>
<li>Some versions of GNU tar have a bug where, when they encounter extended headers,
the exit code indicates failure &mdash; even though the files extracted just fine.</li>
</ul>


<p>When combined, these will cause problems for automated scripts or, for that
matter, anyone who cares about clean execution logs. :)</p>

<h2>How do we fix it?</h2>

<p>There are several possible solutions:</p>

<h3>Tell BSD tar not to insert the extended headers</h3>

<p>This is probably the easiest method, and can be done at least two ways:</p>

<figure class='code'><figcaption><span>Environment variable </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">COPYFILE_DISABLE</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>tar -czf <span class="nv">$your_tar_gz</span> <span class="nv">$your_files</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Command-line argument </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar --disable-copyfile -czf <span class="nv">$your_tar_gz</span> <span class="nv">$your_files</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Use BSD tar on Linux</h3>

<p>This is not such a great option. For one, you need to make the change on your
servers, as opposed to your development machines; secondly, you then need to
keep track of which files are created with which version of tar.</p>

<h3>Use GNU tar on OS X</h3>

<p>This is my preferred option. No change to the server, and you get the assurance
that the same version of tar will be used on both ends.</p>

<p>In fact, for a long time, OS X shipped with GNU tar installed! If you&rsquo;re running
a release before Mavericks, you can stop here and just invoke <code>gnutar</code> on OS X.
This is easily scriptable:</p>

<figure class='code'><figcaption><span>Use GNU tar on OS X </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">OS</span><span class="o">=</span><span class="sb">`</span>uname<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$OS&quot;</span> <span class="o">==</span> <span class="s2">&quot;Darwin&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">tar_bin</span><span class="o">=</span><span class="s1">&#39;gnutar&#39;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">tar_bin</span><span class="o">=</span><span class="s1">&#39;tar&#39;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>For whatever reason, though, Apple stopped shipping GNU tar with OS X as of Mavericks.
Not a problem &mdash; we&rsquo;ll just lean on our old friend <a href="http://brew.sh">Homebrew</a>!</p>

<h2>Homebrew</h2>

<p><a href="http://brew.sh">Homebrew</a> is a command-line package manager for OS X, which
always has everything I&rsquo;m looking for. I love Homebrew, even if they do tell you
to pipe curl into Ruby (<a href="http://blog.existentialize.com/dont-pipe-to-your-shell.html">see here</a>).</p>

<p>Once you have Homebrew installed, installing GNU tar is as easy as:</p>

<pre><code>brew install gnu-tar
</code></pre>

<p>This installs GNU tar as <code>gtar</code>. If you&rsquo;d like it available as <code>gnutar</code> like on
previous versions of OS X, that&rsquo;s just one line as well:</p>

<pre><code>sudo ln -s /usr/local/opt/gnu-tar/libexec/gnubin/tar /usr/bin/gnutar
</code></pre>

<h2>Links</h2>

<p>I found the following links useful here. You might, also.</p>

<p><a href="http://superuser.com/questions/318809/linux-os-x-tar-incompatibility-tarballs-created-onos-x-give-errors-when-unt">superuser.com</a><br/>
<a href="http://xorl.wordpress.com/2012/05/15/admin-mistakes-gnu-bsd-tar-and-posix-compatibility/">xorl.wordpress.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Print random line(s) from a file]]></title>
    <link href="http://lee.greens.io/blog/2014/02/23/quick-tip-random-line-from-a-file/"/>
    <updated>2014-02-23T23:29:00-06:00</updated>
    <id>http://lee.greens.io/blog/2014/02/23/quick-tip-random-line-from-a-file</id>
    <content type="html"><![CDATA[<p>Occasionally, I have a need to pull a random line (or lines) from a file.</p>

<p>To make the example real, let&rsquo;s say we&rsquo;re parsing server logs, and the file contains one server name per line.
If we want to test a change to our parser, we might want to choose a random server and parse the logs for only that server.</p>

<p>shuf, from GNU textutils, makes this easy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">source_file</span><span class="o">=</span><span class="s1">&#39;our_server_list&#39;</span>
</span><span class='line'><span class="nv">server</span><span class="o">=</span><span class="sb">`</span>shuf -n 1 <span class="nv">$source_file</span><span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;The server we chose is: $server&quot;</span>
</span><span class='line'>
</span><span class='line'>./our_parser <span class="nv">$server</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-n</code> parameter controls the number of lines returned: in this case, 1.</p>

<p>For more info on shuf, check <a href="http://en.wikipedia.org/wiki/Shuf">Wikipedia</a> or <a href="http://linux.die.net/man/1/shuf">its man page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Change your Octopress Favicon]]></title>
    <link href="http://lee.greens.io/blog/2014/01/18/change-your-octopress-favicon/"/>
    <updated>2014-01-18T13:17:00-06:00</updated>
    <id>http://lee.greens.io/blog/2014/01/18/change-your-octopress-favicon</id>
    <content type="html"><![CDATA[<p>It seems like every Octopress blog eventually includes a post about customizing Octopress itself.
If my <a href="http://lee.greens.io/blog/2014/01/13/windows-chrome/">previous post</a> didn&rsquo;t count, this one certainly will.</p>

<p><img class="left" src="http://lee.greens.io/images/octopress-favicon.png"></p>

<p>I see too many sites still running the stock Octopress favicon (pictured at left) &mdash; even sites that are otherwise completely customized!
This is one of the easiest changes you can make to customize the appearance of your site. Here&rsquo;s how to change it:</p>

<h3>Create an image file</h3>

<p>Save your preferred icon as a 32x32 (pixels) PNG file.
Historically speaking, favicons are 16x16, but High-PPI displays (&ldquo;Retina&rdquo;, in Apple&rsquo;s marketing language) are now the norm.</p>

<h3>Replace the existing one</h3>

<p>Replace the existing Octopress favicon in <code>source/favicon.png</code> with your newly created one.</p>

<h3>Test!</h3>

<p>Assuming you saw the default one before, the new one should show up without any issues.</p>

<p>If it doesn&rsquo;t, ensure your theme has a link to the favicon.
This is typically in <code>source/_includes/head.html</code>, although it may vary depending on your theme.
There should be a line that looks like this:</p>

<figure class='code'><figcaption><span>Favicon link </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;/favicon.png&quot;</span> <span class="na">rel=</span><span class="s">&quot;icon&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> When testing, use a different browser, or a private-browsing window, to avoid cache issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Chrome, why do my fonts look so bad?]]></title>
    <link href="http://lee.greens.io/blog/2014/01/13/windows-chrome/"/>
    <updated>2014-01-13T23:50:00-06:00</updated>
    <id>http://lee.greens.io/blog/2014/01/13/windows-chrome</id>
    <content type="html"><![CDATA[<p>Anyone who knows me will tell you that I don&rsquo;t exactly have great fashion sense.
I don&rsquo;t wear bespoke suits. Our house is not &ldquo;exquisitely decorated&rdquo;, or &ldquo;tastefully appointed&rdquo;.
I focus more on the practical than the aesthetic.
That said, when I started this blog, I knew I couldn&rsquo;t leave it looking like every other
Octopress blog (you know, like <a href="http://lee.greens.io/images/vanilla_octopress.png">this</a>).</p>

<h3>Easy tweaks</h3>

<p>I started (and finished) with the low-hanging fruit &mdash; colors and fonts.</p>

<p>The color scheme was easy &mdash;
only the best color scheme ever, <a href="http://ethanschoonover.com/solarized">Solarized</a>.
My iTerm is Solarized dark, my graphical Vim is Solarized light, let&rsquo;s keep this train a-rollin&#8217;.</p>

<p>I quickly found two great fonts:
<a href="http://montserrat.zkysky.com.ar/en">Montserrat</a> (headings)
and <a href="http://www.google.com/fonts/specimen/Varela+Round">Varela Round</a> (body).
Both are available on Google Fonts via the SIL Open Font License &mdash; what&rsquo;s not to love?</p>

<h3>The problem</h3>

<p>As it turns out, the answer is &ldquo;Google Chrome on Windows&rdquo;, especially with Google Fonts.
For whatever reason, Chrome (only on Windows) doesn&rsquo;t render TTF or WOFF fonts well.
Click the image below for a more detailed view:</p>

<p><a href="http://lee.greens.io/images/windows-chrome.png">
<img src="http://lee.greens.io/images/windows-chrome.png">
</a></p>

<p>This is especially frustrating because Google Fonts prioritizes TTF and WOFF fonts over others (they are listed earlier in the @font-face rule).
If you use Google Fonts, you just load their CSS into your page, so there&rsquo;s no way to change the order.</p>

<h3>The solution</h3>

<p>Now, if you host your own fonts, or you can at least control your CSS, there is a fix.
Chrome will render SVG fonts acceptably, so you just need to get Chrome to load the SVG font.
You can do this in one of two ways.
You can simply place the SVG earlier in the @font-face rule:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@font-face</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">font-family</span><span class="o">:</span> <span class="s1">&#39;my-webfont&#39;</span><span class="o">;</span>
</span><span class='line'>    <span class="nt">src</span><span class="o">:</span> <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;/fonts/my-webfont.eot&#39;</span><span class="o">);</span>
</span><span class='line'>    <span class="nt">src</span><span class="o">:</span> <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;/fonts/my-webfont.eot?#iefix&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;eot&#39;</span><span class="o">),</span>
</span><span class='line'>        <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;/fonts/my-webfont.svg#myWebFont&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;svg&#39;</span><span class="o">),</span>
</span><span class='line'>        <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;/fonts/my-webfont.woff&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;woff&#39;</span><span class="o">),</span>
</span><span class='line'>        <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;/fonts/my-webfont.ttf&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;truetype&#39;</span><span class="o">);</span>
</span><span class='line'>    <span class="nt">font-weight</span><span class="o">:</span> <span class="nt">normal</span><span class="o">;</span>
</span><span class='line'>    <span class="nt">font-style</span><span class="o">:</span> <span class="nt">normal</span><span class="o">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can create a separate @font-face rule that applies to Chrome only:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@font-face</span> <span class="p">{</span>
</span><span class='line'>    <span class="c">/* your existing font-face rule here, with SVG last */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="nd">:0</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@font-face</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">font-family</span><span class="o">:</span> <span class="s1">&#39;my-webfont&#39;</span><span class="o">;</span>
</span><span class='line'>      <span class="nt">src</span><span class="o">:</span> <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;/fonts/my-webfont.svg#myWebFont&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;svg&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems like the second method (Chrome-specific media query) is more widely accepted, and it should (in theory) work with Google Fonts, although you&rsquo;ll obviously need to host the SVG file yourself.</p>

<h3>Convert fonts with Font Squirrel (April 2014)</h3>

<p>Since I wrote this up as a comment, I thought I&rsquo;d include it in the article:</p>

<p>The easiest way to convert your web fonts (including SVG) is to use the <a href="http://www.fontsquirrel.com/tools/webfont-generator">Webfont Generator at Font Squirrel</a>. It doesn&rsquo;t do SVG by default, so you&rsquo;ll need to switch over to Expert and enable SVG output. Then, you can either edit the order of the @font-face rule or add the Chrome-specific media query as you see fit.</p>

<p>There are lots of free / open fonts out there, so don&rsquo;t use this tool to infringe!</p>

<h3>Update (July 2014)</h3>

<p>Supposedly, this issue is resolved with Chrome 37 (now available).
I haven&rsquo;t had the chance to update my Windows machine yet, but we&rsquo;ll see if
this is finally fixed!</p>

<h4>Notes</h4>

<p>These links were very helpful in solving this issue: <a href="http://www.fontspring.com/blog/smoother-rendering-in-chrome-update">Fontspring</a>, <a href="http://www.adtrak.co.uk/blog/font-face-chrome-rendering/">Adtrak</a><br/>
Here&rsquo;s the Chromium issue (now resolved): <a href="https://code.google.com/p/chromium/issues/detail?id=137692">Chromium issue #137692</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nitrous.io : Collaborate in the cloud]]></title>
    <link href="http://lee.greens.io/blog/2014/01/04/nitrous-dot-io-collaboration-in-the-cloud/"/>
    <updated>2014-01-04T12:28:00-06:00</updated>
    <id>http://lee.greens.io/blog/2014/01/04/nitrous-dot-io-collaboration-in-the-cloud</id>
    <content type="html"><![CDATA[<p>Over the past few months, I&rsquo;ve been helping some friends learn more about software development,
working in Ruby and (eventually) covering most of the web stack.
In this post, I&rsquo;ll talk a little about the tools we&rsquo;ve used to collaborate online, and about the one we&rsquo;ve been using most: <a href="https://www.nitrous.io/join/cs43HaW_jfc">Nitrous.io</a>.</p>

<!-- more -->


<h3>GitHub (and native apps)</h3>

<p>We started with Git and GitHub, not just for version control, but because I&rsquo;m publishing any
support material as a public repo. <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>I&rsquo;m always amazed by the work GitHub is doing to make Git more accessible.
The web interface is great, of course, but they&rsquo;ve also released native apps that are very solid.</p>

<p>Personally, I still use the command line for all of my committing/pulling/pushing.
A graphical app can be really nice for viewing history graphs or diffs, though &mdash;
I like the OS X version almost as much as my old standby <a href="http://gitx.org/">GitX</a>.</p>

<h3>Virtual Machines with Vagrant</h3>

<p>Since most of my friends were running Windows, I knew we needed some sort of virtualized solution.
I didn&rsquo;t want to have to troubleshoot software installations on Windows,
and we definitely needed to isolate our work from their day-to-day OS.</p>

<p>Given that I&rsquo;m seriously addicted to using <a href="http://www.vagrantup.com">Vagrant</a> at my day job,
I included descriptors for a couple of boxes within the course repository.
Just basic provisioning &mdash; sharing folders from the host, installing Ruby and gems, etc.</p>

<p>This worked pretty well.
Once you have VirtualBox and Vagrant installed, it&rsquo;s just &ldquo;git clone; vagrant up&rdquo;,
and I could be sure that my friends&#8217; VMs were properly configured and reproducible.</p>

<h3>Shortcomings</h3>

<p>We worked with this format for a couple of weeks, collaborating using Skype, or Google Hangouts.
The screen sharing on Hangouts is free, but to share a screen with Skype, you need Skype Premium.
On either service, of course, it&rsquo;s view-only &mdash; you can&rsquo;t affect your partner&rsquo;s screen at all.</p>

<p>Now, I&rsquo;m used to pair programming using screen, so for me this was less than ideal.
However, I didn&rsquo;t want to ask my friends to mess around with
forwarding ports, SSH connections, and so on.</p>

<p>And besides, what editor could we use?<br/>
Certainly not vim or emacs, at least at first!</p>

<h1>Enter Nitrous.io</h1>

<p>They provide pre-provisioned VMs (well, LXC containers) that run at EC2,
which you can access in multiple ways:</p>

<ul>
<li>a Web IDE</li>
<li>a Console in your browser</li>
<li>SSH access using your preferred client</li>
</ul>


<p>Each box is given its own (long, semi-cryptic) hostname, and a handful of forwarded ports,
so you can easily expose whatever apps / services you like.</p>

<p>They currently provide four flavors of VM: Ruby/Rails, Python/Django, NodeJS, and Go.
If you need something not listed here, you should usually able to install it from source,
as long as you don&rsquo;t require root access.</p>

<h3>Completely Free Plan</h3>

<p>They do offer a full-featured free plan (not a trial!), with which I&rsquo;m quite happy so far.
I would note that <strong>the free plan isn&rsquo;t suitable for long-running services</strong>,
as free boxes can be shut down for inactivity.
If you want to spend money, you&rsquo;ll not only be able to create multiple boxes with more RAM and disk,
but all paid plans get more virtual memory, greater CPU share, and paid boxes are never shut down.</p>

<h3>Awesome Collab Mode</h3>

<p>Being able to write and execute code in your browser is pretty great,
but for me the killer component of Nitrous.io is the collaboration features.
You can invite other users to be collaborators on a per-box basis,
which I should note does allow them <strong>full access</strong> to your box.</p>

<p>Once you&rsquo;re both in the Web IDE, if you enable &ldquo;Collab Mode&rdquo; on a file,
you begin work on a shared copy where each one of you can see the other one&rsquo;s cursor and selection.
This actually goes one step beyond {screen,tmux}-style sharing,
since each of you can work on different sections of the same file at the same time.</p>

<p>If you&rsquo;re working with someone who&rsquo;s also a command line whiz, you can just use a full-screen console and screen / tmux / vim / emacs &mdash; they&rsquo;re all installed already.</p>

<h3>Autoparts</h3>

<p>When I first started working with Nitrous.io,
their biggest weakness was the difficulty of installing external software on boxes.
If what you needed was lightweight, you could usually build it from source, but things like,
say, a database server were a little more difficult.</p>

<p>This all changed in September when they introduced <a href="http://blog.nitrous.io/2013/09/18/introducing-autoparts-for-nitrous-io.html">Autoparts</a> &mdash;
an open-source package manager specifically for Nitrous.io boxes.
It installs everything needed within your home directory, since you don&rsquo;t have root access.
It includes support for MySQL, PostgreSQL, Redis, Memcached, and MongoDB, as well as many other packages &mdash; see <a href="https://github.com/action-io/autoparts/tree/master/lib/autoparts/packages">GitHub</a> for a full list.</p>

<h1><a href="https://www.nitrous.io/join/cs43HaW_jfc">Sign Up</a></h1>

<p>If this sounds useful to you, sign up via the above link and we&rsquo;ll both get more &ldquo;N2O&rdquo; (Nitrous.io currency) each month.<br/>
Once you&rsquo;ve signed up, feel free to post your referral link in the comments &mdash; I&rsquo;ll replace my link with someone else&rsquo;s once I&rsquo;ve gotten a few signups.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://github.com/LeeXGreen/sep2013/">The class repo</a> &mdash; still a work in progress.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Learn to Code'?]]></title>
    <link href="http://lee.greens.io/blog/2013/12/29/learn-to-code/"/>
    <updated>2013-12-29T14:54:00-06:00</updated>
    <id>http://lee.greens.io/blog/2013/12/29/learn-to-code</id>
    <content type="html"><![CDATA[<p>I was playing around with <a href="http://www.google.ca/trends/explore#q=%22learn%20to%20code%22%2C%20%22learn%20programming%22&amp;cmpt=q">Google Trends</a> the other day, and I discovered something interesting for the terms &ldquo;learn programming&rdquo; and &ldquo;learn to code&rdquo;.<br/>
<a href="http://www.google.ca/trends/explore#q=%22learn%20to%20code%22%2C%20%22learn%20programming%22&cmpt=q">
  <img src="http://lee.greens.io/images/search_graph.png" width="443" height="207">
</a></p>

<p>Look at those spikes!</p>

<!-- more -->


<p>Search volume for both terms has been going up over time since about 2007.
Interest in &ldquo;programming&rdquo; was actually <em>higher</em> before this, so we&rsquo;re seeing &ldquo;code&rdquo; replace it, to some degree.</p>

<p>This makes sense &mdash; &ldquo;coding&rdquo; is sexier than &ldquo;programming&rdquo;; it&rsquo;s less dusty, more headline-friendly.</p>

<p>What I find most interesting, though, is not why this happens, but <em>how</em> it happens &mdash; every time &ldquo;code&rdquo; spikes, search volume for &ldquo;code&rdquo; goes up, and stays up.</p>

<p>The first spike is from January 2012, when <a href="http://www.codeacademy.com">Codeacademy</a> started their first &ldquo;Code Year&rdquo; push.</p>

<p>The second spike is from March 2013, when <a href="http://www.code.org">code.org</a> released some &lsquo;Learn to Code&rsquo; videos featuring all sorts of top tech names &mdash; and Chris Bosh. <em>Of course.</em></p>

<h3>Context</h3>

<p>I&rsquo;ve been thinking about this for a while, but my inspiration for writing it up was <a href="http://www.ultrasaurus.com/2013/12/code-computer-science/">code != computer science</a> by Sarah Allen.
She said most of this better than I will, so I urge you to read it.</p>

<h2>Should you learn to code?</h2>

<p>I think the answer here is unequivocally yes, if you have the free time and desire to do so.
We all rely on technology and software to an incredible degree.
The type of logical thinking required to design, implement, and troubleshoot programs and algorithms can be applied to many other tasks.</p>

<h3>What sort of resources are available?</h3>

<h4>Free / inexpensive</h4>

<p>These include videos, classes (formal and informal), and ebooks, as well as websites and blogs.
One great aggregator of free content is <a href="http://www.bentobox.io/">Bento</a> &mdash; they have links to popular tutorials for almost anything!</p>

<p>I&rsquo;m working on a free class myself &mdash; keep an eye on this blog for more info.</p>

<h4>Subscription</h4>

<p>One example here is <a href="https://teamtreehouse.com">Treehouse</a>. They offer a $25 and a $49 plan, with varying features &mdash; both include extensive amounts of videos.</p>

<h4>&ldquo;Bootcamps&rdquo;</h4>

<p>These are expensive (anywhere from $4k to $12k or more), and very intense. They typically run for 8-12 weeks, and are basically a full-time job in terms of workload.</p>

<h3>Check your privilege!</h3>

<p>Look: I have a computer engineering degree, and I&rsquo;ve been working professionally on software since 2004.
It&rsquo;s no surprise that I think my degree was worth the money and time, if only because of the time period dedicated to learning.</p>

<p>But even I agree that a CS degree is by no means a requirement to be a successful software developer &mdash; especially in 2013, with all the resources that are now available.</p>

<h3>Be realistic</h3>

<p>That said, I can&rsquo;t help but feel that maybe some people are putting too much faith in how &lsquo;Learn to Code&rsquo; will change their lives.
It feels a little predatory:</p>

<p>&ldquo;You can earn up to $100k as a Coder!&rdquo;</p>

<p>Well, okay, yes, it&rsquo;s <em>possible</em>, but it takes serious work to develop those sorts of skills and knowledge.
No matter how hard you work, you can&rsquo;t become an expert overnight, or even in three months.
And if you need to hold down your existing job to take care of your family, your options are even more limited.</p>

<h3>Stay humble</h3>

<p>Make sure, as you&rsquo;re learning about programming, that you try to keep track of the things you <em>don&rsquo;t</em> know.
Most people love working with someone who is aware of their limitations and truly wants to learn.</p>

<h3>Have a goal</h3>

<p>It doesn&rsquo;t really work to learn to code simply so you <em>can</em>.
You need something to work towards, something you&rsquo;d like to accomplish, something you&rsquo;d like to build.</p>

<p>It helps to start small &mdash; maybe you just want a simple webpage with your toddler&rsquo;s 10 current favorite YouTube videos.</p>

<h2>Advice</h2>

<p>The takeaway here depends on who you are and what you want to get out of &lsquo;learning to code&rsquo;:</p>

<h4>Students</h4>

<ul>
<li>If you&rsquo;re still in school, I&rsquo;d urge you to learn more about computers and coding, even if you have to do it on your own.</li>
<li>If you&rsquo;re working toward a computer degree, make sure you supplement it with other coding experience &mdash; whether it&rsquo;s part-time employment, open source, or simply hacking on your own projects.</li>
</ul>


<h4>Non-tech people who work with techies</h4>

<ul>
<li>Learning to code will help you at work. Ask someone for a list of technologies you use and try to learn more about those, or about related topics.</li>
<li>Be realistic about what you know &mdash; never assume that you can estimate how long a task will take without knowing the details!</li>
</ul>


<h4>Junior developers</h4>

<ul>
<li>A rising tide lifts all boats &mdash; if you let it. Make sure you take advantage of all the resources you have available. The guy who wants your job certainly will.</li>
</ul>


<h4>Senior developers</h4>

<ul>
<li>Make sure you promote best principles and practices to the junior developers on your team.</li>
<li>Work on your teaching / presenting skills &mdash; you may soon find you&rsquo;re the only one on your team with a CS degree, and your team will benefit from your knowledge.</li>
<li>Make sure you don&rsquo;t slack on your continuing education either &mdash; technology evolves quickly, and you have to stay ahead.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A shameful first post]]></title>
    <link href="http://lee.greens.io/blog/2013/12/07/a-shameful-first-post/"/>
    <updated>2013-12-07T01:42:00-06:00</updated>
    <id>http://lee.greens.io/blog/2013/12/07/a-shameful-first-post</id>
    <content type="html"><![CDATA[<p>So there you are, deep in the zone, cranking away on your project. You run your thing, and
a minor invocation error causes it to spew 3-byte files all over your working directory.</p>

<p><strong><em>Ugh.</em></strong></p>

<p>Well, no problem, that&rsquo;s what find is for, right?</p>

<pre><code>find . -size 3 | xargs rm
</code></pre>

<p>&hellip; Right? Wrong. From the man page:</p>

<pre><code>  -size n[cwbkMG]
      File uses n units of space.  The following suffixes can be used:

      ‘b’    for 512-byte blocks (this is the default if no suffix is used)
      ‘c’    for bytes
</code></pre>

<p>Of course, this is the case for most *nix and OS X machines. Hope all those 1500-byte files
were under version control!</p>

<h3>Get to the point!</h3>

<p>I&rsquo;m not here to issue a screed against find &mdash; the 512-byte block is
a longstanding default, and you can&rsquo;t always change your public interface &mdash;
but to make the point: <strong>know your tools, and skip the shortcuts.</strong></p>

<p>Sometimes, with technology, we have a tendency to take shortcuts, to act first and think
second. One <em>very personally relevant</em> example is piping a find command
directly to xargs/rm, rather than checking the output first. Another one is running
a command with a wildcard, without first checking the evaluation of that wildcard.</p>

<p>These practices are especially dangerous for sysadmins, but we all can fall prey to the
temptation of the easy way.</p>

<h3>Other posts</h3>

<p>I&rsquo;ve read a few posts recently that highlight similarly dangerous practices:</p>

<p><a href="http://blog.existentialize.com/dont-pipe-to-your-shell.html">Don&rsquo;t Pipe to your Shell</a> &mdash; <a href="https://news.ycombinator.com/item?id=6650987">HN thread</a></p>

<p>This one seems like common sense, but the author&rsquo;s right: this pattern is simply <em>everywhere</em>.
His experiment with netcat leaves out a couple of details (like the fact that most HTTP servers are going to send a Content-Length header), but his point is spot on.</p>

<p><a href="http://thejh.net/misc/website-terminal-copy-paste">Copy-Paste from Website to Terminal</a> &mdash; <a href="https://news.ycombinator.com/item?id=5508225">HN thread</a></p>

<p>This one is especially devious! I think most people&rsquo;s answer to this will be to copy/paste
into an editor. This is all well and good, unless you use vi and the attacker knows it ;)</p>

<h3>P.S.</h3>

<p>The shameful part about this first post is that, once upon a time, I knew very well that
512-byte blocks were the default for find. But, because I got so used to specifying a filesize
in kilobytes (or more), I let myself get tempted into a shortcut.</p>
]]></content>
  </entry>
  
</feed>

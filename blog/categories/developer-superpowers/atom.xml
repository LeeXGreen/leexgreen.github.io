<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Developer Superpowers | Lee Green]]></title>
  <link href="http://lee.greens.io/blog/categories/developer-superpowers/atom.xml" rel="self"/>
  <link href="http://lee.greens.io/"/>
  <updated>2016-02-08T23:57:04-06:00</updated>
  <id>http://lee.greens.io/</id>
  <author>
    <name><![CDATA[Lee Green]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developer Superpower: Aliases]]></title>
    <link href="http://lee.greens.io/blog/2016/02/08/developer-superpower-aliases/"/>
    <updated>2016-02-08T23:08:00-06:00</updated>
    <id>http://lee.greens.io/blog/2016/02/08/developer-superpower-aliases</id>
    <content type="html"><![CDATA[<p><small>
This is the second in a
<a href="/blog/categories/developer-superpowers/">series of posts</a>
designed to help you supercharge your workflow.
</small></p>

<p>In my <a href="/blog/2015/06/08/developer-superpower-z/">last post</a> I mentioned
aliases in passing. A few readers asked me for more information, so I thought
I&rsquo;d write another post.</p>

<p>An alias is essentially a shortcut, or abbreviation, which lets you &ldquo;remap&rdquo; any
command to run one or more other commands. Many developer / command-line tools
support aliases, from command-line shells like bash, zsh, or PowerShell, to
version-control systems like Git or Mercurial. I&rsquo;ll give concrete examples for
bash and Git in this post.</p>

<p>Before I do, though, I want to talk about the reasons one might create an alias.
I find that the aliases I need can be classified into a few categories:</p>

<h3>Convenience</h3>

<p>These aliases are all about speed, so they&rsquo;re as short as possible.
<code>git diff</code> takes too long to type? Alias it to <code>gd</code>.
The most common example of this is the <code>ll</code> alias for <code>ls -l</code>, now included
in many Linux distros by default.</p>

<p>I also include in this category aliases that cover common typos, for example:</p>

<ul>
<li><code>cd..</code> instead of <code>cd ..</code> (leaving out the space)</li>
<li><code>rpsec</code> instead of <code>rspec</code> (transposing the s and the p)</li>
<li><code>xs</code> or <code>vf</code> instead of <code>cd</code> (off-by-one error)</li>
<li><code>gut</code> or <code>got</code> instead of <code>git</code> (off-by-one error on the other hand)</li>
</ul>


<h3>Backwards compatibility</h3>

<p>I started working as a software developer before Linus created Git, in what
many consider &ldquo;the dark ages&rdquo;. As such, I spent a few years using RCS and CVS
for version control. In RCS the commands for <code>check out</code> and <code>check in</code> are
<code>co</code> and <code>ci</code>; these commands were preserved in CVS as aliases for
<code>checkout</code> and <code>commit</code> respectively.</p>

<p>As Git became popular and our projects switched over to using it exclusively,
a senior developer I worked with set up extensive aliases so he could continue
using the same commands he&rsquo;d been used to. I try not to go that far, but muscle
memory is powerful &mdash; and aliases like this can save you a lot of pain.</p>

<h3>Frame of mind</h3>

<p>This one actually started as a backwards compatibility alias, but its role has
really evolved for me over time. Most version-control systems have a command
that shows you which user last modified each line in a file. In SVN, this
commmand is called <code>blame</code>, but it has aliases: <code>annotate</code> and <code>praise</code>.</p>

<p>When we switched to Git, that same senior dev installed <code>praise</code> as an alias for
<code>blame</code>. Even though I&rsquo;ve never used SVN heavily, I still invoke <code>praise</code> every
time, because it reminds me to be charitable with my fellow developers.</p>

<h2>Bash</h2>

<p>In Bash, aliases are created using <code>alias</code>, and destroyed with <code>unalias</code>:</p>

<p>```bash
alias ll=&lsquo;ls -l&rsquo;
alias rpsec=&lsquo;rspec&rsquo;</p>

<p>unalias ll
unalias rpsec
```</p>

<p>Personal aliases are typically defined in the <code>~/.bashrc</code> file.</p>

<p>Note that aliases can cover or &ldquo;shadow&rdquo; existing commands. This can be both
frustrating and awesome. For example, if you alias <code>ls</code> to <code>ls -G</code>, all your
invocations of <code>ls</code> will hit the alias, not the base command.</p>

<p><a href="http://tldp.org/LDP/abs/html/aliases.html">tldp.org</a> has more information on aliases in Bash.</p>

<h2>Git</h2>

<p>There are two ways to create Git aliases. The first is via command line:</p>

<p><code>bash
git config --global alias.co checkout
git config --global alias.ci commit
</code></p>

<p>The second way is via editing a <code>~/.gitconfig</code> (global) or
<code>.git/config</code> (per-repository) file (this is my actual gitconfig file):</p>

<p>```ini
[alias]</p>

<pre><code>ci = commit
co = checkout
st = status
stat = status
praise = blame
sb = show-branch
what = whatchanged
br = branch -a --color

# "merged branches" -- which branches are ancestors of the specified ref?
mbr = branch -a --merged
# "what branches" -- which branches contain the specified ref?
wbr = branch -a --contains

# typo
difff = diff

# list all aliases
la = "!git config -l | grep alias | cut -c 7-"
</code></pre>

<p>```</p>

<p>You can shell out in a Git alias, by starting the alias with a <code>!</code> character:</p>

<p><code>bash
git config --global alias.visual '!gitk'
</code></p>

<p>It&rsquo;s worth noting that the awesome <a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash">git-completion</a> supports
tab completion for aliases, as well as Git builtin commands. You should probably
install it, if you haven&rsquo;t already :)</p>

<p>For more information on Git aliases, see the Pro Git book (pay for it!), or
check <a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases">here.</a></p>

<p>Here are a few samples of real-world Git aliases. Check these out, steal them
for your own use, and remix them to increase your productivity!</p>

<ul>
<li><a href="https://gist.github.com/mwhite/6887990">The Ultimate Git Alias Setup</a></li>
<li><a href="http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/">Must-Have Git Aliases</a></li>
<li><a href="https://ochronus.com/git-tips-from-the-trenches/">Git Tips from the Trenches</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Superpower: Z]]></title>
    <link href="http://lee.greens.io/blog/2015/06/08/developer-superpower-z/"/>
    <updated>2015-06-08T18:04:00-05:00</updated>
    <id>http://lee.greens.io/blog/2015/06/08/developer-superpower-z</id>
    <content type="html"><![CDATA[<p><small>
This is the first in a <a href="/blog/categories/developer-superpowers/">series of posts</a>
designed to help you supercharge your workflow.
</small></p>

<p>Anyone who uses a command-line interface needs to change directories on a
regular basis. Even if your terminal emulator allows you to open new windows
in the same directory as previous ones, you still need to move around to get
work done.</p>

<h3>The problem</h3>

<p><img class="right" src="/images/soap_fail.gif"></p>

<p>Getting directory paths right can take a lot of time, especially within a new
project or a new environment. Shell tab completion can help, but it still has
to be navigated, and new entries mess with your muscle memory.</p>

<p>There are, of course, more creative solutions: I&rsquo;ve seen developers who create
aliases for each major project directory they work with, which is nice at first,
but it doesn&rsquo;t really scale.</p>

<h3>The solution</h3>

<p>As is typical in computing, we can stand on the shoulders of giants &mdash; Behold
<a href="https://github.com/rupa/z">Z</a>, a directory jumper which enables freaky-fast
directory switching:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ z blog; pwd
</span><span class='line'>/Users/this_is_me/devel/blog&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$ z bigco roi; pwd
</span><span class='line'>/Users/this_is_me/devel/consulting/bigco/2014/roi_reporting_project&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$ z scipy 0.15; pwd
</span><span class='line'>/Users/this_is_me/devel/oss/scipy/0.15</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It chooses directories based on <em>frecency</em>, which is &ldquo;a portmanteau of
frequency and recency&rdquo;.  It has a few options, so check
<a href="https://github.com/rupa/z">GitHub</a>, but I usually just invoke it bare &mdash;
in my experience, it pretty much always Does What I Mean.</p>

<h3>Installation</h3>

<p>If you&rsquo;re on OS X, it&rsquo;s available via <a href="http://brew.sh/">Homebrew</a>, or follow
the instructions below.</p>

<p>Just save it to disk and source it in your shell files &mdash; e.g. for bash:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -o ~/.z.sh -sSL &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://raw.githubusercontent.com/rupa/z/d5adc9a6239c2ee44309fd78bca68f301eb0d45a/z.sh&quot;</span>&gt;https://raw.githubusercontent.com/rupa/z/d5adc9a6239c2ee44309fd78bca68f301eb0d45a/z.sh&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;examine the downloaded file, <span class="k">if </span>all appears good:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;echo &amp;lsquo;. ~/.z.sh&amp;rsquo; &gt;&gt; ~/.bashrc
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Afterwards, you may have to open a new terminal, or restart.</p>

<p><em>Note:</em> The above snippet uses HTTPS and a fixed Git SHA, but do be careful here,
since we&rsquo;re basically <a href="http://www.seancassidy.me/dont-pipe-to-your-shell.html">piping curl to shell</a>.</p>
]]></content>
  </entry>
  
</feed>
